plugins {
  id "org.springframework.boot" version "3.0.1"
  id "io.spring.dependency-management" version "1.1.0"
  id "java"
  id "org.jetbrains.kotlin.jvm" version "1.7.0"
  id "org.jetbrains.kotlin.plugin.spring" version "1.7.0"
  id "com.diffplug.spotless" version "6.12.0"
  id "jacoco"
  id "org.sonarqube" version "3.5.0.2730"
  id "com.github.jk1.dependency-license-report" version "2.1"
  id "com.gorylenko.gradle-git-properties" version "2.4.1"
  id "com.adarshr.test-logger" version "3.2.0"
  id "com.github.ben-manes.versions" version "0.44.0"
}

group = "de.bund.digitalservice"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "17"

configurations { compileOnly { extendsFrom annotationProcessor } }

repositories {
  mavenCentral()
  maven {
    url = uri("https://maven.pkg.github.com/digitalservicebund/neuris-juris-xml-export")
    credentials {
      username = System.getenv("GH_PACKAGES_REPOSITORY_USER")
      password = System.getenv("GH_PACKAGES_REPOSITORY_TOKEN")
    }
  }
}

jacoco { toolVersion = "0.8.8" }

springBoot { buildInfo() }

testlogger { theme "mocha" }

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-security"
  // => CVE-2022-31692
  implementation "org.springframework.security:spring-security-core:6.0.1"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-client:3.0.1"
  implementation("org.springframework.boot:spring-boot-starter-webflux") {
    exclude group: "io.netty", module: "netty-tcnative-classes"
    because("CVE-2021-43797, not using Tomcat")
  }
  implementation "org.springframework.cloud:spring-cloud-starter-kubernetes-client-config:2.1.3"

  implementation "org.springframework.boot:spring-boot-starter-data-redis"

  // CVE-2022-3171
  implementation "com.google.protobuf:protobuf-java:3.21.12"

  // => CVE-2021-37136, CVE-2021-37137, CVE-2021-43797
  implementation("io.netty:netty-all:4.1.86.Final") {
    exclude group: "io.netty", module: "netty-tcnative-classes"
    because("CVE-2021-43797, not using Tomcat")
  }
  implementation "io.projectreactor.netty:reactor-netty-core:1.1.1"
  implementation("org.yaml:snakeyaml:1.33") { because("CVE-2022-25857") }

  implementation "ch.qos.logback:logback-classic:1.4.5"
  implementation "ch.qos.logback:logback-core:1.4.5"

  implementation "org.springframework.boot:spring-boot-starter-data-r2dbc"
  implementation "org.postgresql:r2dbc-postgresql:1.0.0.RELEASE"
  implementation "io.r2dbc:r2dbc-spi:1.0.0.RELEASE"
  implementation "io.r2dbc:r2dbc-pool:1.0.0.RELEASE"

  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.postgresql:postgresql:42.5.1"

  implementation "com.sendinblue:sib-api-v3-sdk:6.0.0"

  implementation platform("software.amazon.awssdk:bom:2.19.25")
  implementation "software.amazon.awssdk:netty-nio-client"
  implementation "software.amazon.awssdk:s3"
  implementation "org.springdoc:springdoc-openapi-webflux-ui:1.6.14"

  // CVE-2022-42004, CVE-2022-42003
  implementation "com.fasterxml.jackson:jackson-bom:2.14.1"
  implementation "com.fasterxml.jackson.core:jackson-databind:2.14.1"

  implementation "com.github.spullara.mustache.java:compiler:0.9.10"

  // CVE-2022-40153
  implementation "com.fasterxml.woodstox:woodstox-core:6.4.0"

  implementation "org.docx4j:docx4j-JAXB-MOXy:11.4.8"
  implementation "com.sun.mail:jakarta.mail:2.0.1"
  implementation "com.sun.activation:jakarta.activation:2.0.1"
  implementation("jakarta.xml.bind:jakarta.xml.bind-api") { version { strictly "3.0.1" } }
  implementation "org.freehep:freehep-graphicsio-emf:2.4"

  // package served by private repo, requires authentication:
  implementation("de.bund.digitalservice:neuris-juris-xml-export:0.4.4") {
    exclude group: "org.slf4j", module: "slf4j-simple"
  }
  // for local development:
  // implementation files("../../neuris-juris-xml-export/build/libs/neuris-juris-xml-export-0.1.5.jar")

  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.1"

  implementation "io.micrometer:micrometer-registry-prometheus:1.10.2"
  implementation "io.micrometer:micrometer-core:1.10.2"

  implementation "io.sentry:sentry-spring-boot-starter:6.13.0"
  implementation "org.springframework.boot:spring-boot-starter-validation"

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  testImplementation("com.ninja-squad:springmockk:4.0.0")

  compileOnly "org.projectlombok:lombok"
  annotationProcessor "org.projectlombok:lombok"

  developmentOnly "org.springframework.boot:spring-boot-devtools"

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.mockito", module: "mockito-core"
  }
  testImplementation "org.mockito:mockito-inline:4.11.0"
  testImplementation "io.projectreactor:reactor-test:3.5.1"
  testImplementation "org.springframework.security:spring-security-test:6.0.1"
  testImplementation "com.tngtech.archunit:archunit-junit5:1.0.1"
  testImplementation "org.mockito:mockito-junit-jupiter:4.11.0"
  testImplementation "org.testcontainers:testcontainers:1.17.6"
  testImplementation "org.testcontainers:junit-jupiter:1.17.6"
  testImplementation "org.testcontainers:postgresql:1.17.6"
  testImplementation "io.projectreactor:reactor-test:3.4.24"

  // this is to force transitive dependencies to use 1.0.24 instead of
  // 1.0.23 as that is affected by CVE-2022-31684
  implementation "io.projectreactor.netty:reactor-netty-http:1.1.1"
  implementation "org.flywaydb:flyway-core:9.12.0"
  implementation "org.jetbrains.kotlin:kotlin-reflect"

  implementation "org.jsoup:jsoup:1.15.3"

  testImplementation "org.jeasy:easy-random-core:5.0.0"
  testImplementation "com.google.code.gson:gson:2.10"
}

jar { // We have no need for the plain archive, thus skip creation for build speedup!
  enabled = false }

compileKotlin { kotlinOptions.jvmTarget = "17" }
compileTestKotlin { kotlinOptions.jvmTarget = "17" }

test {
  useJUnitPlatform { excludeTags "integration", "journey" }
}

task integrationTest(type: Test) {
  description = "Runs the integration tests."
  group = "verification"
  useJUnitPlatform { includeTags "integration" }

  // So that running integration test require running unit tests first,
  // and we won"t even attempt running integration tests when there are
  // failing unit tests.
  dependsOn test
  finalizedBy jacocoTestReport
}
check.dependsOn integrationTest

task journeyTest(type: Test) {
  description = "Runs the journey tests."
  group = "verification"
  useJUnitPlatform { includeTags "journey" }
}

jacocoTestReport {
  // Jacoco hooks into all tasks of type: Test automatically, but results for each of these
  // tasks are kept separately and are not combined out of the box.. we want to gather
  // coverage of our unit and integration tests as a single report!
  executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")
  reports {
    xml.required = true
    html.required = true
  }
  dependsOn integrationTest // All tests are required to run before generating a report..

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["**/config/*"])
    }))
  }
}

spotless {
  kotlin { ktlint() }
  java {
    removeUnusedImports()
    googleJavaFormat()
    custom "Refuse wildcard imports", {
      // Wildcard imports can't be resolved by spotless itself.
      // This will require the developer themselves to adhere to best practices.
      if (it =~ /\nimport .*\*;/) {
        throw new AssertionError("Do not use wildcard imports. \"spotlessApply\" cannot resolve this issue.")
      }
    }
  }
  groovyGradle {
    greclipse("4.6.3").configFile("greclipse.properties")
    toggleOffOn()
    replaceRegex("quotes", "(['])(.*)\\1", "\"\$2\"")
  }
  format "misc", {
    target "**/*.js", "**/*.json", "**/*.md", "**/*.properties", "**/*.sh", "**/*.sql", "**/*.yaml", "**/*.yml"
    targetExclude "frontend/**", // Has its own prettier setup!
        "**/dist/**", "**/static/**"
    // spotless:off
    prettier(["prettier": "2.6.1", "prettier-plugin-properties": "0.1.0", "prettier-plugin-sh": "0.7.1", "prettier-plugin-sql": "0.10.0"])
        .config([
          "keySeparator": "=", // for prettier-plugin-properties
          "language": "postgresql", // for prettier-plugin-sql
        ])
    // spotless:on
  }
}

sonarqube {
  // NOTE: sonarqube picks up combined coverage correctly without further configuration from:
  // build/reports/jacoco/test/jacocoTestReport.xml
  properties {
    property "sonar.projectKey", "digitalservicebund_ris-backend-service"
    property "sonar.organization", "digitalservicebund"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.exclusions", "**/src/fields/**,**/config/**,**/S3AsyncMockClient.java,**/Application.java,**/NormsMemoryRepository.kt"
  }
}

project.tasks["sonarqube"].dependsOn jacocoTestReport

bootBuildImage {
  def containerRegistry = System.getenv("CONTAINER_REGISTRY") ?: "ghcr.io"
  def containerImageName = System.getenv("CONTAINER_IMAGE_NAME") ?: "digitalservicebund/${rootProject.name}"
  def containerImageVersion = System.getenv("CONTAINER_IMAGE_VERSION") ?: "latest"

  imageName = "${containerRegistry}/${containerImageName}:${containerImageVersion}"
  builder = "paketobuildpacks/builder@sha256:8c317e17e87583e0ea8bfc2ffd2952b684d1028be2a40317af8f791f72b85f4e" // pin to version 0.1.313-tiny
  publish = false
  docker {
    publishRegistry {
      username = System.getenv("CONTAINER_REGISTRY_USER") ?: ""
      password = System.getenv("CONTAINER_REGISTRY_PASSWORD") ?: ""
      url = "https://${containerRegistry}"
    }
  }
}


import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.CsvReportRenderer

licenseReport {
  // If there's a new dependency with a yet unknown license causing this task to fail
  // the license(s) will be listed in build/reports/dependency-license/dependencies-without-allowed-license.json
  allowedLicensesFile = new File("$projectDir/../allowed-licenses.json")
  filters = [
    // With second arg true we get the default transformations:
    // https://github.com/jk1/Gradle-License-Report/blob/7cf695c38126b63ef9e907345adab84dfa92ea0e/src/main/resources/default-license-normalizer-bundle.json
    new LicenseBundleNormalizer("$projectDir/license-normalizer-bundle.json", true)
  ]
  renderers = [
    new CsvReportRenderer("backend-licence-report.csv")
  ]
}
