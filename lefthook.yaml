min_version: 1.1.4

commit-msg:
  commands:
    lint-commit-msg:
      run: npx --yes commitlint --edit

pre-commit:
  parallel: true
  commands:
    format-backend:
      tags: format backend
      root: backend/
      run: ./gradlew spotlessApply -DspotlessFiles=$(echo {staged_files} | sed 's/ /,/g') && git add {staged_files}
    frontend-typecheck:
      tags: format frontend
      root: frontend/
      glob: "*.{ts,vue}"
      run: npm run --silent type:check
    frontend-prettier:
      tags: format frontend
      root: frontend/
      glob: "*.{vue,ts,js,json}"
      run: npm run --silent prettier:fix {staged_files} && git add {staged_files}
    frontend-eslint:
      tags: frontend lint
      root: frontend/
      glob: "*.{vue,ts,js,json}"
      run: npm run --silent eslint:fix {staged_files} && git add {staged_files}    
    frontend-stylelint:
      tags: frontend lint
      root: frontend/
      run: npm run --silent stylelint:fix {staged_files} && git add {staged_files}

pre-push:
  parallel: true
  commands:
    licenses-audit-backend:
      tags: licenses audit backend
      root: backend/
      run: ./gradlew checkLicense
    licenses-audit-frontend:
      tags: licenses audit frontend
      root: frontend/
      run: npm run audit:licences > /dev/null;
    check-pipeline-status:
      run: |
        which gh 2>&1 >/dev/null ||
        (echo "You need to install and configure Github CLI."; exit 1)

        # Check current brunch, skipping if not main.
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        if [[ "$current_branch" != "main" ]]; then
          echo "Skipping pipeline status. Performs check only on main branch"
          exit 0
        fi

        conclusion="$(
          gh run list --branch main --workflow pipeline --json conclusion,status \
          --jq '[.[] | select(.status=="completed")][0].conclusion' \
        )"

        if [[ "$conclusion" != "success" ]]; then
          echo "The last completed pipeline run has failed!"
          echo "If you intend to fix the pipeline use '--no-verify', BUT ONLY IF all other hooks are okay."
          exit 1
        fi

tests:
  follow: true
  parallel: true
  commands:
    frontend-tests:
      tags: frontend tests
      root: frontend/
      run: npm run check 2>&1
    backend-unit-tests:
      tags: backend tests
      root: backend/
      run: ./gradlew test -x integrationTest 2>&1
    backend-integration-tests:
      tags: backend tests
      root: backend/
      run: ./gradlew integrationTest -x test 2>&1
