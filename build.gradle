plugins {
  id "org.springframework.boot" version "2.7.0"
  id "io.spring.dependency-management" version "1.0.11.RELEASE"
  id "java"
  id "com.diffplug.spotless" version "6.6.0"
  id "jacoco"
  id "org.sonarqube" version "3.3"
  id "com.github.jk1.dependency-license-report" version "2.1"
}

group = "de.bund.digitalservice"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "17"

configurations { compileOnly { extendsFrom annotationProcessor } }

repositories { mavenCentral() }

jacoco { toolVersion = "0.8.8" }

// Force version for transient dependencies...=> CVE-2021-43797
configurations.all {
  resolutionStrategy.eachDependency { details ->
    if (details.requested.group == "io.netty" && details.requested.name != "netty-tcnative-classes") {
      details.useVersion "4.1.72.Final"
    }
  }
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation("org.springframework.boot:spring-boot-starter-webflux") {
    exclude group: "io.netty", module: "netty-tcnative-classes"
    because("CVE-2021-43797, not using Tomcat")
  }
  // => CVE-2021-37136, CVE-2021-37137, CVE-2021-43797
  implementation("io.netty:netty-all:4.1.72.Final") {
    exclude group: "io.netty", module: "netty-tcnative-classes"
    because("CVE-2021-43797, not using Tomcat")
  }
  // => CVE-2021-44228, CVE-2021-45105
  implementation "org.apache.logging.log4j:log4j-api:2.17.0"
  // => CVE-2021-44228, CVE-2021-45105
  implementation "org.apache.logging.log4j:log4j-to-slf4j:2.17.0"
  // => CVE-2021-42550
  implementation "ch.qos.logback:logback-classic:1.2.9"
  implementation "ch.qos.logback:logback-core:1.2.9"
  implementation "org.springframework.boot:spring-boot-starter-data-r2dbc:2.6.7"
  implementation "com.h2database:h2:2.1.212"
  implementation "io.r2dbc:r2dbc-h2:0.9.1.RELEASE"
  implementation "io.r2dbc:r2dbc-spi:1.0.0.RELEASE"
  implementation "io.r2dbc:r2dbc-pool:0.9.0.RELEASE"

  implementation platform("software.amazon.awssdk:bom:2.17.191")
  implementation "software.amazon.awssdk:netty-nio-client"
  implementation "software.amazon.awssdk:s3"

  compileOnly "org.projectlombok:lombok"
  developmentOnly "org.springframework.boot:spring-boot-devtools"
  annotationProcessor "org.projectlombok:lombok"
  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.mockito", module: "mockito-core"
  }
  testImplementation "org.mockito:mockito-inline:4.0.0"
  testImplementation "io.projectreactor:reactor-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "com.tngtech.archunit:archunit-junit5:0.23.0"
  testImplementation "org.mockito:mockito-junit-jupiter:4.5.0"
}

jar { // We have no need for the plain archive, thus skip creation for build speedup!
  enabled = false }

test {
  useJUnitPlatform { excludeTags "integration", "journey" }
  testLogging { events "passed", "skipped", "failed" }
}

task integrationTest(type: Test) {
  description = "Runs the integration tests."
  group = "verification"
  useJUnitPlatform { includeTags "integration" }
  testLogging { events "passed", "skipped", "failed" }
  // So that running integration test require running unit tests first,
  // and we won"t even attempt running integration tests when there are
  // failing unit tests.
  dependsOn test
  finalizedBy jacocoTestReport
}
check.dependsOn integrationTest

task journeyTest(type: Test) {
  description = "Runs the journey tests."
  group = "verification"
  useJUnitPlatform { includeTags "journey" }
  testLogging { events "passed", "skipped", "failed" }
}

jacocoTestReport {
  // Jacoco hooks into all tasks of type: Test automatically, but results for each of these
  // tasks are kept separately and are not combined out of the box.. we want to gather
  // coverage of our unit and integration tests as a single report!
  executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")
  reports {
    xml.required = true
    html.required = true
  }
  dependsOn integrationTest // All tests are required to run before generating a report..

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["**/config/*"])
    }))
  }
}

spotless {
  java {
    removeUnusedImports()
    googleJavaFormat()
  }
  groovyGradle {
    greclipse("4.6.3").configFile("greclipse.properties")
    toggleOffOn()
  }
  format "misc", {
    target "**/*.js", "**/*.json", "**/*.md", "**/*.properties", "**/*.sh", "**/*.yml"
    targetExclude "web/**", // Has its own prettier setup!
        "**/dist/**", "**/static/**"
    // spotless:off
    prettier(["prettier": "2.6.1", "prettier-plugin-properties": "0.1.0", "prettier-plugin-sh": "0.7.1"])
        .config(["keySeparator": "="])
    // spotless:on
  }
}

sonarqube {
  // NOTE: sonarqube picks up combined coverage correctly without further configuration from:
  // build/reports/jacoco/test/jacocoTestReport.xml
  properties {
    property "sonar.projectKey", "digitalservice4germany_ris-backend-service"
    property "sonar.organization", "digitalservice4germany"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.exclusions", "**/config/**"
  }
}

project.tasks["sonarqube"].dependsOn jacocoTestReport

bootBuildImage {
  def containerRegistry = System.getenv("CONTAINER_REGISTRY") ?: "ghcr.io"
  def containerImageName = System.getenv("CONTAINER_IMAGE_NAME") ?: "digitalservice4germany/${rootProject.name}"
  def containerImageVersion = System.getenv("CONTAINER_IMAGE_VERSION") ?: "latest"

  imageName = "${containerRegistry}/${containerImageName}:${containerImageVersion}"
  publish = false
  docker {
    publishRegistry {
      username = System.getenv("CONTAINER_REGISTRY_USER") ?: ""
      password = System.getenv("CONTAINER_REGISTRY_PASSWORD") ?: ""
      url = "https://${containerRegistry}"
    }
  }
}

licenseReport {
  // If there's a new dependency with a yet unknown license causing this task to fail
  // the license(s) will be listed in build/reports/dependency-license/dependencies-without-allowed-license.json
  allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
}
