on:
  workflow_call:
    inputs:
      browser:
        required: false
        type: string
        default: chromium
      mode:
        required: false
        type: string
        default: e2e
      subproject:
        required: false
        type: string
    secrets:
      STAGING_URL:
        required: true
      SLACK_WEBHOOK_URL:
        required: false

jobs:
  playwright-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: ./frontend/.node-version
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: cache node modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: |
            ./frontend/node_modules
          key: modules-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install node modules
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: |
          npm ci
        working-directory: ./frontend
      - name: Get Playwright version
        working-directory: ./frontend
        run: echo "PLAYWRIGHT_VERSION=$(jq -r '.packages["node_modules/@playwright/test"].version' package-lock.json)" >> $GITHUB_ENV
      - name: Cache browser binaries
        id: cache-browser-binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install playwright browsers
        if: steps.cache-browser-binaries.outputs.cache-hit != 'true'
        run: |
          npx --yes playwright install --with-deps ${{ inputs.browser }}
        working-directory: ./frontend
      - name: Run ${{ inputs.mode }} tests in ${{ inputs.browser }}
        env:
          E2E_BASE_URL: ${{ secrets.STAGING_URL }}
          E2E_TEST_USER: ${{ secrets.E2E_TEST_USER }}
          E2E_TEST_PASSWORD: ${{ secrets.E2E_TEST_PASSWORD }}
          E2E_TEST_BASIC_AUTH_USER: ${{ secrets.E2E_TEST_BASIC_AUTH_USER }}
          E2E_TEST_BASIC_AUTH_PASSWORD: ${{ secrets.E2E_TEST_BASIC_AUTH_PASSWORD }}
          GH_PACKAGES_REPOSITORY_USER: ${{ secrets.GH_PACKAGES_REPOSITORY_USER }}
          GH_PACKAGES_REPOSITORY_TOKEN: ${{ secrets.GH_PACKAGES_REPOSITORY_TOKEN }}
        run: |
          if [[ -z "${{ inputs.subproject }}" ]]; then
            npm run test:${{ inputs.mode }} -- --project ${{ inputs.browser }}
          else
            npm run test:${{ inputs.mode }}:${{ inputs.subproject }} -- --project ${{ inputs.browser }}
          fi
        working-directory: ./frontend
      - name: Upload screenshots and traces of failed tests
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: failed-${{ inputs.mode }}-tests-${{ inputs.browser }}
          path: |
            ./frontend/test-results/**/*.png
            ./frontend/test-results/**/trace.zip
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: lazy-actions/slatify@c4847b8c84e3e8076fd3c42cc00517a10426ed65
        if: ${{ failure() && env.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          type: ${{ job.status }}
          job_name: "${{ inputs.subproject }} ${{ inputs.mode }} test :point_right:"
          mention: "here"
          mention_if: "failure"
          commit: true
          url: ${{ secrets.SLACK_WEBHOOK_URL }}
          token: ${{ secrets.GITHUB_TOKEN }}
